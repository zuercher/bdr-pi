#!/bin/bash

# fail on unset variables
set -u

#{{include fs.sh}}#
#{{include io.sh}}#
#{{include network.sh}}#
#{{include setup_config.sh}}#

usage() {
    perror "Usage:"
    perror "    $0 [--configure-network]"
    perror
    perror "Options:"
    perror "    --configure-network"
    perror "        Skip checking for network access and immediately initiate"
    perror "        wifi configuration, even if there is a connection."
    exit 1
}

# Require bash
# shellcheck disable=SC2292
if [ -z "${BASH_VERSION:-}" ]; then
    abort "bash is required to interpret this script."
fi

OS="$(uname)"
if [[ "$OS" != "Linux" ]]; then
    abort "OS is ${OS} -- this isn't going to work out."
fi

if [[ "$(whoami)" == "root" ]]; then
    abort "run this as a normal user with access to sudo"
fi

BDR_DIR="${HOME}/.bdr-pi"
mkdir -p "${BDR_DIR}" || abort "could not create dir: ${BDR_DIR}"

export BDRPI_SETUP_CONFIG_FILE="${BDR_DIR}/config.txt"

REPO="https://github.com/zuercher/bdr-pi"
BDR_REPO_DIR="${HOME}/.bdr-pi/bdr-pi"

CONFIGURE_NETWORK=false
while [[ -n "${1:-}" ]]; do
    case "$1" in
        --configure-network)
            CONFIGURE_NETWORK=true
            shift
            ;;
        *)
            usage
            ;;
    esac
done

NETWORK_OK=false
if ! "${CONFIGURE_NETWORK}"; then
    N=0
    NUM_ATTEMPTS=30
    while [[ "${N}" -lt "${NUM_ATTEMPTS}" ]]; do
        if network_can_reach "${REPO}"; then
            NETWORK_OK=true
            break
        fi

        N=$((N + 1))
        LEFT=$((NUM_ATTEMPTS - N))
        perror "unable to reach ${REPO}, will retry ${LEFT} more times..."
        sleep 1
    done

    if ! "${NETWORK_OK}"; then
        perror "failed to reach ${REPO}, starting wifi setup..."
        CONFIGURE_NETWORK=true
    fi
fi

if "${CONFIGURE_NETWORK}"; then
   wireless_network_setup

   report "wireless setup complete; waiting for the internet to become reachable..."

   N=0
   NUM_ATTEMPTS=60
   while ! network_can_reach "${REPO}"; do
       N=$((N + 1))
       if [[ "${N}" -ge "${NUM_ATTEMPTS}" ]]; then
           abort "failed to reach ${REPO} for 60 seconds, something's fucky"
       fi

       LEFT=$((NUM_ATTEMPTS - N))
       perror "unable to reach ${REPO}, will retry ${LEFT} more times..."
       sleep 1
   done
fi

# Check if git is installed.
if ! installed git; then
    # Nope. Tallyho!
    echo "installing git"
    sudo apt-get -y install git
    hash -r

    if ! installed git; then
        abort "tried to install git, but still can't find it on the path"
    fi
fi

if [[ -d "${BDR_REPO_DIR}/.git" ]]; then
    # Git repository is present. Let's update it.
    push_dir "${BDR_REPO_DIR}"
    echo -n "${REPO} "
    git pull || abort "unable to pull $(git remote get-url origin)"
    pop_dir
else
    # No git repository. Clone it.
    git clone "${REPO}" "${BDR_REPO_DIR}" || abort "unable to clone ${REPO}"
    push_dir "${BDR_REPO_DIR}"
    # So it doesn't complain every time we pull
    git config pull.ff only
    pop_dir
fi

mkdir -p "${BDR_DIR}/state" || abort "could not create state dir"
mkdir -p "${BDR_DIR}/logs" || abort "could not create log dir"

SETUP_LOGFILE="${BDR_DIR}/logs/setup_$(date -u "+%Y%m%d_%H%M%S").log"

# Initial setup is complete, now transfer control to the code in BDR_REPO_DIR
# Jump through some hoops to set SETUP_FLUSH_PID with script's PID so we
# can send SIGUSR1 to it (which will flush logs). We also take care to
# pass along the original user's name, path and tty.
script --quiet --flush --log-out "${SETUP_LOGFILE}" \
       --command \
       "bash -c 'sudo \
            SETUP_USER=\"${USER}\" \
            SETUP_HOME=\"${HOME}\" \
            SETUP_TTY=\"$(tty)\" \
            SETUP_FLUSH_PID=\"\$PPID\" \
            BDR_DIR=\"${BDR_DIR}\" \
            BDR_REPO_DIR=\"${BDR_REPO_DIR}\" \
            BDRPI_SETUP_CONFIG_FILE=\"${BDRPI_SETUP_CONFIG_FILE}\" \
            \"${BDR_REPO_DIR}/update.sh\" $*'"
